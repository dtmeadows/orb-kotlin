// File generated from our OpenAPI spec by Stainless.

package com.withorb.api.models

import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

class PlanTest {

    @Test
    fun createPlan() {
        val plan =
            Plan.builder()
                .id("string")
                .basePlan(
                    Plan.BasePlan.builder()
                        .id("m2t5akQeh2obwxeU")
                        .externalPlanId("m2t5akQeh2obwxeU")
                        .name("Example plan")
                        .build()
                )
                .basePlanId("string")
                .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .currency("string")
                .defaultInvoiceMemo("string")
                .description("string")
                .discount(
                    Discount.ofPercentageDiscount(
                        Discount.PercentageDiscount.builder()
                            .appliesToPriceIds(listOf("string"))
                            .discountType(Discount.PercentageDiscount.DiscountType.PERCENTAGE)
                            .percentageDiscount(1.0)
                            .reason("string")
                            .build()
                    )
                )
                .externalPlanId("string")
                .invoicingCurrency("string")
                .maximum(
                    Plan.Maximum.builder()
                        .appliesToPriceIds(listOf("string"))
                        .maximumAmount("string")
                        .build()
                )
                .maximumAmount("string")
                .metadata(Plan.Metadata.builder().build())
                .minimum(
                    Plan.Minimum.builder()
                        .appliesToPriceIds(listOf("string"))
                        .minimumAmount("string")
                        .build()
                )
                .minimumAmount("string")
                .name("string")
                .netTerms(123L)
                .planPhases(
                    listOf(
                        Plan.PlanPhase.builder()
                            .id("string")
                            .description("string")
                            .discount(
                                Discount.ofPercentageDiscount(
                                    Discount.PercentageDiscount.builder()
                                        .appliesToPriceIds(listOf("string"))
                                        .discountType(
                                            Discount.PercentageDiscount.DiscountType.PERCENTAGE
                                        )
                                        .percentageDiscount(1.0)
                                        .reason("string")
                                        .build()
                                )
                            )
                            .duration(123L)
                            .durationUnit(Plan.PlanPhase.DurationUnit.DAILY)
                            .maximum(
                                Plan.PlanPhase.Maximum.builder()
                                    .appliesToPriceIds(listOf("string"))
                                    .maximumAmount("string")
                                    .build()
                            )
                            .maximumAmount("string")
                            .minimum(
                                Plan.PlanPhase.Minimum.builder()
                                    .appliesToPriceIds(listOf("string"))
                                    .minimumAmount("string")
                                    .build()
                            )
                            .minimumAmount("string")
                            .name("string")
                            .order(123L)
                            .build()
                    )
                )
                .prices(
                    listOf(
                        Price.ofUnitPrice(
                            Price.UnitPrice.builder()
                                .id("string")
                                .billableMetric(
                                    Price.UnitPrice.BillableMetric.builder().id("string").build()
                                )
                                .cadence(Price.UnitPrice.Cadence.ONE_TIME)
                                .conversionRate(42.23)
                                .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .creditAllocation(
                                    Price.UnitPrice.CreditAllocation.builder()
                                        .allowsRollover(true)
                                        .currency("string")
                                        .build()
                                )
                                .currency("string")
                                .discount(
                                    Discount.ofPercentageDiscount(
                                        Discount.PercentageDiscount.builder()
                                            .appliesToPriceIds(listOf("string"))
                                            .discountType(
                                                Discount.PercentageDiscount.DiscountType.PERCENTAGE
                                            )
                                            .percentageDiscount(1.0)
                                            .reason("string")
                                            .build()
                                    )
                                )
                                .externalPriceId("string")
                                .fixedPriceQuantity(42.23)
                                .item(
                                    Price.UnitPrice.Item.builder()
                                        .id("string")
                                        .name("string")
                                        .build()
                                )
                                .maximum(
                                    Price.UnitPrice.Maximum.builder()
                                        .appliesToPriceIds(listOf("string"))
                                        .maximumAmount("string")
                                        .build()
                                )
                                .maximumAmount("string")
                                .minimum(
                                    Price.UnitPrice.Minimum.builder()
                                        .appliesToPriceIds(listOf("string"))
                                        .minimumAmount("string")
                                        .build()
                                )
                                .minimumAmount("string")
                                .modelType(Price.UnitPrice.ModelType.UNIT)
                                .name("string")
                                .planPhaseOrder(123L)
                                .priceType(Price.UnitPrice.PriceType.USAGE_PRICE)
                                .unitConfig(
                                    Price.UnitPrice.UnitConfig.builder()
                                        .unitAmount("string")
                                        .build()
                                )
                                .build()
                        )
                    )
                )
                .product(
                    Plan.Product.builder()
                        .id("string")
                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .name("string")
                        .build()
                )
                .status(Plan.Status.ACTIVE)
                .trialConfig(
                    Plan.TrialConfig.builder()
                        .trialPeriod(123L)
                        .trialPeriodUnit(Plan.TrialConfig.TrialPeriodUnit.DAYS)
                        .build()
                )
                .version(123L)
                .build()
        assertThat(plan).isNotNull
        assertThat(plan.id()).isEqualTo("string")
        assertThat(plan.basePlan())
            .isEqualTo(
                Plan.BasePlan.builder()
                    .id("m2t5akQeh2obwxeU")
                    .externalPlanId("m2t5akQeh2obwxeU")
                    .name("Example plan")
                    .build()
            )
        assertThat(plan.basePlanId()).isEqualTo("string")
        assertThat(plan.createdAt()).isEqualTo(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(plan.currency()).isEqualTo("string")
        assertThat(plan.defaultInvoiceMemo()).isEqualTo("string")
        assertThat(plan.description()).isEqualTo("string")
        assertThat(plan.discount())
            .isEqualTo(
                Discount.ofPercentageDiscount(
                    Discount.PercentageDiscount.builder()
                        .appliesToPriceIds(listOf("string"))
                        .discountType(Discount.PercentageDiscount.DiscountType.PERCENTAGE)
                        .percentageDiscount(1.0)
                        .reason("string")
                        .build()
                )
            )
        assertThat(plan.externalPlanId()).isEqualTo("string")
        assertThat(plan.invoicingCurrency()).isEqualTo("string")
        assertThat(plan.maximum())
            .isEqualTo(
                Plan.Maximum.builder()
                    .appliesToPriceIds(listOf("string"))
                    .maximumAmount("string")
                    .build()
            )
        assertThat(plan.maximumAmount()).isEqualTo("string")
        assertThat(plan.metadata()).isEqualTo(Plan.Metadata.builder().build())
        assertThat(plan.minimum())
            .isEqualTo(
                Plan.Minimum.builder()
                    .appliesToPriceIds(listOf("string"))
                    .minimumAmount("string")
                    .build()
            )
        assertThat(plan.minimumAmount()).isEqualTo("string")
        assertThat(plan.name()).isEqualTo("string")
        assertThat(plan.netTerms()).isEqualTo(123L)
        assertThat(plan.planPhases())
            .containsExactly(
                Plan.PlanPhase.builder()
                    .id("string")
                    .description("string")
                    .discount(
                        Discount.ofPercentageDiscount(
                            Discount.PercentageDiscount.builder()
                                .appliesToPriceIds(listOf("string"))
                                .discountType(Discount.PercentageDiscount.DiscountType.PERCENTAGE)
                                .percentageDiscount(1.0)
                                .reason("string")
                                .build()
                        )
                    )
                    .duration(123L)
                    .durationUnit(Plan.PlanPhase.DurationUnit.DAILY)
                    .maximum(
                        Plan.PlanPhase.Maximum.builder()
                            .appliesToPriceIds(listOf("string"))
                            .maximumAmount("string")
                            .build()
                    )
                    .maximumAmount("string")
                    .minimum(
                        Plan.PlanPhase.Minimum.builder()
                            .appliesToPriceIds(listOf("string"))
                            .minimumAmount("string")
                            .build()
                    )
                    .minimumAmount("string")
                    .name("string")
                    .order(123L)
                    .build()
            )
        assertThat(plan.prices())
            .containsExactly(
                Price.ofUnitPrice(
                    Price.UnitPrice.builder()
                        .id("string")
                        .billableMetric(
                            Price.UnitPrice.BillableMetric.builder().id("string").build()
                        )
                        .cadence(Price.UnitPrice.Cadence.ONE_TIME)
                        .conversionRate(42.23)
                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .creditAllocation(
                            Price.UnitPrice.CreditAllocation.builder()
                                .allowsRollover(true)
                                .currency("string")
                                .build()
                        )
                        .currency("string")
                        .discount(
                            Discount.ofPercentageDiscount(
                                Discount.PercentageDiscount.builder()
                                    .appliesToPriceIds(listOf("string"))
                                    .discountType(
                                        Discount.PercentageDiscount.DiscountType.PERCENTAGE
                                    )
                                    .percentageDiscount(1.0)
                                    .reason("string")
                                    .build()
                            )
                        )
                        .externalPriceId("string")
                        .fixedPriceQuantity(42.23)
                        .item(Price.UnitPrice.Item.builder().id("string").name("string").build())
                        .maximum(
                            Price.UnitPrice.Maximum.builder()
                                .appliesToPriceIds(listOf("string"))
                                .maximumAmount("string")
                                .build()
                        )
                        .maximumAmount("string")
                        .minimum(
                            Price.UnitPrice.Minimum.builder()
                                .appliesToPriceIds(listOf("string"))
                                .minimumAmount("string")
                                .build()
                        )
                        .minimumAmount("string")
                        .modelType(Price.UnitPrice.ModelType.UNIT)
                        .name("string")
                        .planPhaseOrder(123L)
                        .priceType(Price.UnitPrice.PriceType.USAGE_PRICE)
                        .unitConfig(
                            Price.UnitPrice.UnitConfig.builder().unitAmount("string").build()
                        )
                        .build()
                )
            )
        assertThat(plan.product())
            .isEqualTo(
                Plan.Product.builder()
                    .id("string")
                    .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .name("string")
                    .build()
            )
        assertThat(plan.status()).isEqualTo(Plan.Status.ACTIVE)
        assertThat(plan.trialConfig())
            .isEqualTo(
                Plan.TrialConfig.builder()
                    .trialPeriod(123L)
                    .trialPeriodUnit(Plan.TrialConfig.TrialPeriodUnit.DAYS)
                    .build()
            )
        assertThat(plan.version()).isEqualTo(123L)
    }
}
