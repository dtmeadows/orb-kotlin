// File generated from our OpenAPI spec by Stainless.

package com.withorb.api.models

import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

class CreditNoteTest {

    @Test
    fun createCreditNote() {
        val creditNote =
            CreditNote.builder()
                .id("string")
                .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .creditNoteNumber("string")
                .creditNotePdf("string")
                .customer(
                    CreditNote.Customer.builder().id("string").externalCustomerId("string").build()
                )
                .invoiceId("string")
                .lineItems(
                    listOf(
                        CreditNote.LineItem.builder()
                            .id("string")
                            .amount("string")
                            .name("string")
                            .quantity(42.23)
                            .subtotal("string")
                            .taxAmounts(
                                listOf(
                                    CreditNote.LineItem.TaxAmount.builder()
                                        .amount("string")
                                        .taxRateDescription("string")
                                        .taxRatePercentage("string")
                                        .build()
                                )
                            )
                            .discounts(
                                listOf(
                                    CreditNote.LineItem.Discount.builder()
                                        .id("string")
                                        .amountApplied("string")
                                        .appliesToPriceIds(listOf("string"))
                                        .discountType(
                                            CreditNote.LineItem.Discount.DiscountType.PERCENTAGE
                                        )
                                        .percentageDiscount(42.23)
                                        .amountDiscount("string")
                                        .reason("string")
                                        .build()
                                )
                            )
                            .build()
                    )
                )
                .maximumAmountAdjustment(
                    CreditNote.MaximumAmountAdjustment.builder()
                        .amountApplied("string")
                        .discountType(CreditNote.MaximumAmountAdjustment.DiscountType.PERCENTAGE)
                        .percentageDiscount(42.23)
                        .appliesToPrices(
                            listOf(
                                CreditNote.MaximumAmountAdjustment.AppliesToPrice.builder()
                                    .id("string")
                                    .name("string")
                                    .build()
                            )
                        )
                        .reason("string")
                        .build()
                )
                .memo("string")
                .minimumAmountRefunded("string")
                .reason(CreditNote.Reason.DUPLICATE)
                .subtotal("string")
                .total("string")
                .type(CreditNote.Type.REFUND)
                .voidedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .discounts(
                    listOf(
                        CreditNote.Discount.builder()
                            .amountApplied("string")
                            .discountType(CreditNote.Discount.DiscountType.PERCENTAGE)
                            .percentageDiscount(42.23)
                            .appliesToPrices(
                                listOf(
                                    CreditNote.Discount.AppliesToPrice.builder()
                                        .id("string")
                                        .name("string")
                                        .build()
                                )
                            )
                            .reason("string")
                            .build()
                    )
                )
                .build()
        assertThat(creditNote).isNotNull
        assertThat(creditNote.id()).isEqualTo("string")
        assertThat(creditNote.createdAt())
            .isEqualTo(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(creditNote.creditNoteNumber()).isEqualTo("string")
        assertThat(creditNote.creditNotePdf()).isEqualTo("string")
        assertThat(creditNote.customer())
            .isEqualTo(
                CreditNote.Customer.builder().id("string").externalCustomerId("string").build()
            )
        assertThat(creditNote.invoiceId()).isEqualTo("string")
        assertThat(creditNote.lineItems())
            .containsExactly(
                CreditNote.LineItem.builder()
                    .id("string")
                    .amount("string")
                    .name("string")
                    .quantity(42.23)
                    .subtotal("string")
                    .taxAmounts(
                        listOf(
                            CreditNote.LineItem.TaxAmount.builder()
                                .amount("string")
                                .taxRateDescription("string")
                                .taxRatePercentage("string")
                                .build()
                        )
                    )
                    .discounts(
                        listOf(
                            CreditNote.LineItem.Discount.builder()
                                .id("string")
                                .amountApplied("string")
                                .appliesToPriceIds(listOf("string"))
                                .discountType(CreditNote.LineItem.Discount.DiscountType.PERCENTAGE)
                                .percentageDiscount(42.23)
                                .amountDiscount("string")
                                .reason("string")
                                .build()
                        )
                    )
                    .build()
            )
        assertThat(creditNote.maximumAmountAdjustment())
            .isEqualTo(
                CreditNote.MaximumAmountAdjustment.builder()
                    .amountApplied("string")
                    .discountType(CreditNote.MaximumAmountAdjustment.DiscountType.PERCENTAGE)
                    .percentageDiscount(42.23)
                    .appliesToPrices(
                        listOf(
                            CreditNote.MaximumAmountAdjustment.AppliesToPrice.builder()
                                .id("string")
                                .name("string")
                                .build()
                        )
                    )
                    .reason("string")
                    .build()
            )
        assertThat(creditNote.memo()).isEqualTo("string")
        assertThat(creditNote.minimumAmountRefunded()).isEqualTo("string")
        assertThat(creditNote.reason()).isEqualTo(CreditNote.Reason.DUPLICATE)
        assertThat(creditNote.subtotal()).isEqualTo("string")
        assertThat(creditNote.total()).isEqualTo("string")
        assertThat(creditNote.type()).isEqualTo(CreditNote.Type.REFUND)
        assertThat(creditNote.voidedAt())
            .isEqualTo(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(creditNote.discounts())
            .containsExactly(
                CreditNote.Discount.builder()
                    .amountApplied("string")
                    .discountType(CreditNote.Discount.DiscountType.PERCENTAGE)
                    .percentageDiscount(42.23)
                    .appliesToPrices(
                        listOf(
                            CreditNote.Discount.AppliesToPrice.builder()
                                .id("string")
                                .name("string")
                                .build()
                        )
                    )
                    .reason("string")
                    .build()
            )
    }
}
