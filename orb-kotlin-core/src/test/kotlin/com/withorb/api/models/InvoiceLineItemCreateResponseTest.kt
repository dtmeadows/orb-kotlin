// File generated from our OpenAPI spec by Stainless.

package com.withorb.api.models

import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

class InvoiceLineItemCreateResponseTest {

    @Test
    fun createInvoiceLineItemCreateResponse() {
        val invoiceLineItemCreateResponse =
            InvoiceLineItemCreateResponse.builder()
                .id("string")
                .amount("7.00")
                .discount(
                    Discount.ofPercentageDiscount(
                        Discount.PercentageDiscount.builder()
                            .appliesToPriceIds(listOf("string"))
                            .discountType(Discount.PercentageDiscount.DiscountType.PERCENTAGE)
                            .percentageDiscount(1.0)
                            .reason("string")
                            .build()
                    )
                )
                .endDate(OffsetDateTime.parse("2022-02-01T08:00:00+00:00"))
                .grouping("string")
                .maximum(
                    InvoiceLineItemCreateResponse.Maximum.builder()
                        .appliesToPriceIds(listOf("string"))
                        .maximumAmount("string")
                        .build()
                )
                .maximumAmount("string")
                .minimum(
                    InvoiceLineItemCreateResponse.Minimum.builder()
                        .appliesToPriceIds(listOf("string"))
                        .minimumAmount("string")
                        .build()
                )
                .minimumAmount("string")
                .name("Fixed Fee")
                .price(
                    Price.ofUnitPrice(
                        Price.UnitPrice.builder()
                            .id("string")
                            .billableMetric(
                                Price.UnitPrice.BillableMetric.builder().id("string").build()
                            )
                            .cadence(Price.UnitPrice.Cadence.ONE_TIME)
                            .conversionRate(42.23)
                            .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .creditAllocation(
                                Price.UnitPrice.CreditAllocation.builder()
                                    .allowsRollover(true)
                                    .currency("string")
                                    .build()
                            )
                            .currency("string")
                            .discount(
                                Discount.ofPercentageDiscount(
                                    Discount.PercentageDiscount.builder()
                                        .appliesToPriceIds(listOf("string"))
                                        .discountType(
                                            Discount.PercentageDiscount.DiscountType.PERCENTAGE
                                        )
                                        .percentageDiscount(1.0)
                                        .reason("string")
                                        .build()
                                )
                            )
                            .externalPriceId("string")
                            .fixedPriceQuantity(42.23)
                            .item(
                                Price.UnitPrice.Item.builder().id("string").name("string").build()
                            )
                            .maximum(
                                Price.UnitPrice.Maximum.builder()
                                    .appliesToPriceIds(listOf("string"))
                                    .maximumAmount("string")
                                    .build()
                            )
                            .maximumAmount("string")
                            .minimum(
                                Price.UnitPrice.Minimum.builder()
                                    .appliesToPriceIds(listOf("string"))
                                    .minimumAmount("string")
                                    .build()
                            )
                            .minimumAmount("string")
                            .modelType(Price.UnitPrice.ModelType.UNIT)
                            .name("string")
                            .planPhaseOrder(123L)
                            .priceType(Price.UnitPrice.PriceType.USAGE_PRICE)
                            .unitConfig(
                                Price.UnitPrice.UnitConfig.builder().unitAmount("string").build()
                            )
                            .build()
                    )
                )
                .quantity(42.23)
                .startDate(OffsetDateTime.parse("2022-02-01T08:00:00+00:00"))
                .subLineItems(
                    listOf(
                        InvoiceLineItemCreateResponse.SubLineItem.ofMatrixSubLineItem(
                            InvoiceLineItemCreateResponse.SubLineItem.MatrixSubLineItem.builder()
                                .amount("9.00")
                                .grouping(
                                    InvoiceLineItemCreateResponse.SubLineItem.MatrixSubLineItem
                                        .Grouping
                                        .builder()
                                        .key("region")
                                        .value("west")
                                        .build()
                                )
                                .matrixConfig(
                                    InvoiceLineItemCreateResponse.SubLineItem.MatrixSubLineItem
                                        .MatrixConfig
                                        .builder()
                                        .dimensionValues(listOf("string"))
                                        .build()
                                )
                                .name("Tier One")
                                .quantity(42.23)
                                .type(
                                    InvoiceLineItemCreateResponse.SubLineItem.MatrixSubLineItem.Type
                                        .MATRIX
                                )
                                .build()
                        )
                    )
                )
                .subtotal("9.00")
                .taxAmounts(
                    listOf(
                        InvoiceLineItemCreateResponse.TaxAmount.builder()
                            .amount("string")
                            .taxRateDescription("string")
                            .taxRatePercentage("string")
                            .build()
                    )
                )
                .build()
        assertThat(invoiceLineItemCreateResponse).isNotNull
        assertThat(invoiceLineItemCreateResponse.id()).isEqualTo("string")
        assertThat(invoiceLineItemCreateResponse.amount()).isEqualTo("7.00")
        assertThat(invoiceLineItemCreateResponse.discount())
            .isEqualTo(
                Discount.ofPercentageDiscount(
                    Discount.PercentageDiscount.builder()
                        .appliesToPriceIds(listOf("string"))
                        .discountType(Discount.PercentageDiscount.DiscountType.PERCENTAGE)
                        .percentageDiscount(1.0)
                        .reason("string")
                        .build()
                )
            )
        assertThat(invoiceLineItemCreateResponse.endDate())
            .isEqualTo(OffsetDateTime.parse("2022-02-01T08:00:00+00:00"))
        assertThat(invoiceLineItemCreateResponse.grouping()).isEqualTo("string")
        assertThat(invoiceLineItemCreateResponse.maximum())
            .isEqualTo(
                InvoiceLineItemCreateResponse.Maximum.builder()
                    .appliesToPriceIds(listOf("string"))
                    .maximumAmount("string")
                    .build()
            )
        assertThat(invoiceLineItemCreateResponse.maximumAmount()).isEqualTo("string")
        assertThat(invoiceLineItemCreateResponse.minimum())
            .isEqualTo(
                InvoiceLineItemCreateResponse.Minimum.builder()
                    .appliesToPriceIds(listOf("string"))
                    .minimumAmount("string")
                    .build()
            )
        assertThat(invoiceLineItemCreateResponse.minimumAmount()).isEqualTo("string")
        assertThat(invoiceLineItemCreateResponse.name()).isEqualTo("Fixed Fee")
        assertThat(invoiceLineItemCreateResponse.price())
            .isEqualTo(
                Price.ofUnitPrice(
                    Price.UnitPrice.builder()
                        .id("string")
                        .billableMetric(
                            Price.UnitPrice.BillableMetric.builder().id("string").build()
                        )
                        .cadence(Price.UnitPrice.Cadence.ONE_TIME)
                        .conversionRate(42.23)
                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .creditAllocation(
                            Price.UnitPrice.CreditAllocation.builder()
                                .allowsRollover(true)
                                .currency("string")
                                .build()
                        )
                        .currency("string")
                        .discount(
                            Discount.ofPercentageDiscount(
                                Discount.PercentageDiscount.builder()
                                    .appliesToPriceIds(listOf("string"))
                                    .discountType(
                                        Discount.PercentageDiscount.DiscountType.PERCENTAGE
                                    )
                                    .percentageDiscount(1.0)
                                    .reason("string")
                                    .build()
                            )
                        )
                        .externalPriceId("string")
                        .fixedPriceQuantity(42.23)
                        .item(Price.UnitPrice.Item.builder().id("string").name("string").build())
                        .maximum(
                            Price.UnitPrice.Maximum.builder()
                                .appliesToPriceIds(listOf("string"))
                                .maximumAmount("string")
                                .build()
                        )
                        .maximumAmount("string")
                        .minimum(
                            Price.UnitPrice.Minimum.builder()
                                .appliesToPriceIds(listOf("string"))
                                .minimumAmount("string")
                                .build()
                        )
                        .minimumAmount("string")
                        .modelType(Price.UnitPrice.ModelType.UNIT)
                        .name("string")
                        .planPhaseOrder(123L)
                        .priceType(Price.UnitPrice.PriceType.USAGE_PRICE)
                        .unitConfig(
                            Price.UnitPrice.UnitConfig.builder().unitAmount("string").build()
                        )
                        .build()
                )
            )
        assertThat(invoiceLineItemCreateResponse.quantity()).isEqualTo(42.23)
        assertThat(invoiceLineItemCreateResponse.startDate())
            .isEqualTo(OffsetDateTime.parse("2022-02-01T08:00:00+00:00"))
        assertThat(invoiceLineItemCreateResponse.subLineItems())
            .containsExactly(
                InvoiceLineItemCreateResponse.SubLineItem.ofMatrixSubLineItem(
                    InvoiceLineItemCreateResponse.SubLineItem.MatrixSubLineItem.builder()
                        .amount("9.00")
                        .grouping(
                            InvoiceLineItemCreateResponse.SubLineItem.MatrixSubLineItem.Grouping
                                .builder()
                                .key("region")
                                .value("west")
                                .build()
                        )
                        .matrixConfig(
                            InvoiceLineItemCreateResponse.SubLineItem.MatrixSubLineItem.MatrixConfig
                                .builder()
                                .dimensionValues(listOf("string"))
                                .build()
                        )
                        .name("Tier One")
                        .quantity(42.23)
                        .type(
                            InvoiceLineItemCreateResponse.SubLineItem.MatrixSubLineItem.Type.MATRIX
                        )
                        .build()
                )
            )
        assertThat(invoiceLineItemCreateResponse.subtotal()).isEqualTo("9.00")
        assertThat(invoiceLineItemCreateResponse.taxAmounts())
            .containsExactly(
                InvoiceLineItemCreateResponse.TaxAmount.builder()
                    .amount("string")
                    .taxRateDescription("string")
                    .taxRatePercentage("string")
                    .build()
            )
    }
}
