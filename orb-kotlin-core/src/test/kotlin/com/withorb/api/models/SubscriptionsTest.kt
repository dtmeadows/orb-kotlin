// File generated from our OpenAPI spec by Stainless.

package com.withorb.api.models

import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

class SubscriptionsTest {

    @Test
    fun createSubscriptions() {
        val subscriptions =
            Subscriptions.builder()
                .data(
                    listOf(
                        Subscription.builder()
                            .id("string")
                            .activePlanPhaseOrder(123L)
                            .adjustmentIntervals(
                                listOf(
                                    Subscription.AdjustmentInterval.builder()
                                        .id("string")
                                        .adjustment(
                                            Subscription.AdjustmentInterval.Adjustment
                                                .ofAmountDiscountAdjustment(
                                                    Subscription.AdjustmentInterval.Adjustment
                                                        .AmountDiscountAdjustment
                                                        .builder()
                                                        .adjustmentType(
                                                            Subscription.AdjustmentInterval
                                                                .Adjustment
                                                                .AmountDiscountAdjustment
                                                                .AdjustmentType
                                                                .AMOUNT_DISCOUNT
                                                        )
                                                        .amountDiscount("string")
                                                        .appliesToPriceIds(listOf("string"))
                                                        .reason("string")
                                                        .build()
                                                )
                                        )
                                        .appliesToPriceIntervalIds(listOf("string"))
                                        .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                        .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                        .build()
                                )
                            )
                            .autoCollection(true)
                            .billingCycleDay(31L)
                            .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .currentBillingPeriodEndDate(
                                OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                            )
                            .currentBillingPeriodStartDate(
                                OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                            )
                            .customer(
                                Customer.builder()
                                    .id("string")
                                    .additionalEmails(listOf("string"))
                                    .autoCollection(true)
                                    .balance("string")
                                    .billingAddress(
                                        Customer.BillingAddress.builder()
                                            .city("string")
                                            .country("string")
                                            .line1("string")
                                            .line2("string")
                                            .postalCode("string")
                                            .state("string")
                                            .build()
                                    )
                                    .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                    .currency("string")
                                    .email("string")
                                    .emailDelivery(true)
                                    .externalCustomerId("string")
                                    .metadata(Customer.Metadata.builder().build())
                                    .name("string")
                                    .paymentProvider(Customer.PaymentProvider.QUICKBOOKS)
                                    .paymentProviderId("string")
                                    .portalUrl("string")
                                    .shippingAddress(
                                        Customer.ShippingAddress.builder()
                                            .city("string")
                                            .country("string")
                                            .line1("string")
                                            .line2("string")
                                            .postalCode("string")
                                            .state("string")
                                            .build()
                                    )
                                    .taxId(
                                        Customer.TaxId.builder()
                                            .country(Customer.TaxId.Country.AD)
                                            .type(Customer.TaxId.Type.AD_NRT)
                                            .value("string")
                                            .build()
                                    )
                                    .timezone("string")
                                    .accountingSyncConfiguration(
                                        Customer.AccountingSyncConfiguration.builder()
                                            .accountingProviders(
                                                listOf(
                                                    Customer.AccountingSyncConfiguration
                                                        .AccountingProvider
                                                        .builder()
                                                        .externalProviderId("string")
                                                        .providerType(
                                                            Customer.AccountingSyncConfiguration
                                                                .AccountingProvider
                                                                .ProviderType
                                                                .QUICKBOOKS
                                                        )
                                                        .build()
                                                )
                                            )
                                            .excluded(true)
                                            .build()
                                    )
                                    .reportingConfiguration(
                                        Customer.ReportingConfiguration.builder()
                                            .exempt(true)
                                            .build()
                                    )
                                    .build()
                            )
                            .defaultInvoiceMemo("string")
                            .discountIntervals(
                                listOf(
                                    Subscription.DiscountInterval.ofAmountDiscountInterval(
                                        Subscription.DiscountInterval.AmountDiscountInterval
                                            .builder()
                                            .amountDiscount("string")
                                            .appliesToPriceIds(listOf("string"))
                                            .appliesToPriceIntervalIds(listOf("string"))
                                            .discountType(
                                                Subscription.DiscountInterval.AmountDiscountInterval
                                                    .DiscountType
                                                    .AMOUNT
                                            )
                                            .endDate(
                                                OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                            )
                                            .startDate(
                                                OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                            )
                                            .build()
                                    )
                                )
                            )
                            .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .fixedFeeQuantitySchedule(
                                listOf(
                                    Subscription.FixedFeeQuantitySchedule.builder()
                                        .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                        .priceId("string")
                                        .quantity(42.23)
                                        .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                        .build()
                                )
                            )
                            .invoicingThreshold("string")
                            .maximumIntervals(
                                listOf(
                                    Subscription.MaximumInterval.builder()
                                        .appliesToPriceIds(listOf("string"))
                                        .appliesToPriceIntervalIds(listOf("string"))
                                        .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                        .maximumAmount("string")
                                        .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                        .build()
                                )
                            )
                            .metadata(Subscription.Metadata.builder().build())
                            .minimumIntervals(
                                listOf(
                                    Subscription.MinimumInterval.builder()
                                        .appliesToPriceIds(listOf("string"))
                                        .appliesToPriceIntervalIds(listOf("string"))
                                        .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                        .minimumAmount("string")
                                        .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                        .build()
                                )
                            )
                            .netTerms(123L)
                            .plan(
                                Plan.builder()
                                    .id("string")
                                    .basePlan(
                                        Plan.BasePlan.builder()
                                            .id("m2t5akQeh2obwxeU")
                                            .externalPlanId("m2t5akQeh2obwxeU")
                                            .name("Example plan")
                                            .build()
                                    )
                                    .basePlanId("string")
                                    .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                    .currency("string")
                                    .defaultInvoiceMemo("string")
                                    .description("string")
                                    .discount(
                                        Discount.ofPercentageDiscount(
                                            Discount.PercentageDiscount.builder()
                                                .appliesToPriceIds(listOf("string"))
                                                .discountType(
                                                    Discount.PercentageDiscount.DiscountType
                                                        .PERCENTAGE
                                                )
                                                .percentageDiscount(1.0)
                                                .reason("string")
                                                .build()
                                        )
                                    )
                                    .externalPlanId("string")
                                    .invoicingCurrency("string")
                                    .maximum(
                                        Plan.Maximum.builder()
                                            .appliesToPriceIds(listOf("string"))
                                            .maximumAmount("string")
                                            .build()
                                    )
                                    .maximumAmount("string")
                                    .metadata(Plan.Metadata.builder().build())
                                    .minimum(
                                        Plan.Minimum.builder()
                                            .appliesToPriceIds(listOf("string"))
                                            .minimumAmount("string")
                                            .build()
                                    )
                                    .minimumAmount("string")
                                    .name("string")
                                    .netTerms(123L)
                                    .planPhases(
                                        listOf(
                                            Plan.PlanPhase.builder()
                                                .id("string")
                                                .description("string")
                                                .discount(
                                                    Discount.ofPercentageDiscount(
                                                        Discount.PercentageDiscount.builder()
                                                            .appliesToPriceIds(listOf("string"))
                                                            .discountType(
                                                                Discount.PercentageDiscount
                                                                    .DiscountType
                                                                    .PERCENTAGE
                                                            )
                                                            .percentageDiscount(1.0)
                                                            .reason("string")
                                                            .build()
                                                    )
                                                )
                                                .duration(123L)
                                                .durationUnit(Plan.PlanPhase.DurationUnit.DAILY)
                                                .maximum(
                                                    Plan.PlanPhase.Maximum.builder()
                                                        .appliesToPriceIds(listOf("string"))
                                                        .maximumAmount("string")
                                                        .build()
                                                )
                                                .maximumAmount("string")
                                                .minimum(
                                                    Plan.PlanPhase.Minimum.builder()
                                                        .appliesToPriceIds(listOf("string"))
                                                        .minimumAmount("string")
                                                        .build()
                                                )
                                                .minimumAmount("string")
                                                .name("string")
                                                .order(123L)
                                                .build()
                                        )
                                    )
                                    .prices(
                                        listOf(
                                            Price.ofUnitPrice(
                                                Price.UnitPrice.builder()
                                                    .id("string")
                                                    .billableMetric(
                                                        Price.UnitPrice.BillableMetric.builder()
                                                            .id("string")
                                                            .build()
                                                    )
                                                    .cadence(Price.UnitPrice.Cadence.ONE_TIME)
                                                    .conversionRate(42.23)
                                                    .createdAt(
                                                        OffsetDateTime.parse(
                                                            "2019-12-27T18:11:19.117Z"
                                                        )
                                                    )
                                                    .creditAllocation(
                                                        Price.UnitPrice.CreditAllocation.builder()
                                                            .allowsRollover(true)
                                                            .currency("string")
                                                            .build()
                                                    )
                                                    .currency("string")
                                                    .discount(
                                                        Discount.ofPercentageDiscount(
                                                            Discount.PercentageDiscount.builder()
                                                                .appliesToPriceIds(listOf("string"))
                                                                .discountType(
                                                                    Discount.PercentageDiscount
                                                                        .DiscountType
                                                                        .PERCENTAGE
                                                                )
                                                                .percentageDiscount(1.0)
                                                                .reason("string")
                                                                .build()
                                                        )
                                                    )
                                                    .externalPriceId("string")
                                                    .fixedPriceQuantity(42.23)
                                                    .item(
                                                        Price.UnitPrice.Item.builder()
                                                            .id("string")
                                                            .name("string")
                                                            .build()
                                                    )
                                                    .maximum(
                                                        Price.UnitPrice.Maximum.builder()
                                                            .appliesToPriceIds(listOf("string"))
                                                            .maximumAmount("string")
                                                            .build()
                                                    )
                                                    .maximumAmount("string")
                                                    .minimum(
                                                        Price.UnitPrice.Minimum.builder()
                                                            .appliesToPriceIds(listOf("string"))
                                                            .minimumAmount("string")
                                                            .build()
                                                    )
                                                    .minimumAmount("string")
                                                    .modelType(Price.UnitPrice.ModelType.UNIT)
                                                    .name("string")
                                                    .planPhaseOrder(123L)
                                                    .priceType(
                                                        Price.UnitPrice.PriceType.USAGE_PRICE
                                                    )
                                                    .unitConfig(
                                                        Price.UnitPrice.UnitConfig.builder()
                                                            .unitAmount("string")
                                                            .build()
                                                    )
                                                    .build()
                                            )
                                        )
                                    )
                                    .product(
                                        Plan.Product.builder()
                                            .id("string")
                                            .createdAt(
                                                OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                            )
                                            .name("string")
                                            .build()
                                    )
                                    .status(Plan.Status.ACTIVE)
                                    .trialConfig(
                                        Plan.TrialConfig.builder()
                                            .trialPeriod(123L)
                                            .trialPeriodUnit(Plan.TrialConfig.TrialPeriodUnit.DAYS)
                                            .build()
                                    )
                                    .version(123L)
                                    .build()
                            )
                            .priceIntervals(
                                listOf(
                                    Subscription.PriceInterval.builder()
                                        .id("string")
                                        .billingCycleDay(123L)
                                        .currentBillingPeriodEndDate(
                                            OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                        )
                                        .currentBillingPeriodStartDate(
                                            OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                        )
                                        .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                        .fixedFeeQuantityTransitions(
                                            listOf(
                                                Subscription.PriceInterval
                                                    .FixedFeeQuantityTransition
                                                    .builder()
                                                    .effectiveDate(
                                                        OffsetDateTime.parse(
                                                            "2019-12-27T18:11:19.117Z"
                                                        )
                                                    )
                                                    .priceId("string")
                                                    .quantity(123L)
                                                    .build()
                                            )
                                        )
                                        .price(
                                            Price.ofUnitPrice(
                                                Price.UnitPrice.builder()
                                                    .id("string")
                                                    .billableMetric(
                                                        Price.UnitPrice.BillableMetric.builder()
                                                            .id("string")
                                                            .build()
                                                    )
                                                    .cadence(Price.UnitPrice.Cadence.ONE_TIME)
                                                    .conversionRate(42.23)
                                                    .createdAt(
                                                        OffsetDateTime.parse(
                                                            "2019-12-27T18:11:19.117Z"
                                                        )
                                                    )
                                                    .creditAllocation(
                                                        Price.UnitPrice.CreditAllocation.builder()
                                                            .allowsRollover(true)
                                                            .currency("string")
                                                            .build()
                                                    )
                                                    .currency("string")
                                                    .discount(
                                                        Discount.ofPercentageDiscount(
                                                            Discount.PercentageDiscount.builder()
                                                                .appliesToPriceIds(listOf("string"))
                                                                .discountType(
                                                                    Discount.PercentageDiscount
                                                                        .DiscountType
                                                                        .PERCENTAGE
                                                                )
                                                                .percentageDiscount(1.0)
                                                                .reason("string")
                                                                .build()
                                                        )
                                                    )
                                                    .externalPriceId("string")
                                                    .fixedPriceQuantity(42.23)
                                                    .item(
                                                        Price.UnitPrice.Item.builder()
                                                            .id("string")
                                                            .name("string")
                                                            .build()
                                                    )
                                                    .maximum(
                                                        Price.UnitPrice.Maximum.builder()
                                                            .appliesToPriceIds(listOf("string"))
                                                            .maximumAmount("string")
                                                            .build()
                                                    )
                                                    .maximumAmount("string")
                                                    .minimum(
                                                        Price.UnitPrice.Minimum.builder()
                                                            .appliesToPriceIds(listOf("string"))
                                                            .minimumAmount("string")
                                                            .build()
                                                    )
                                                    .minimumAmount("string")
                                                    .modelType(Price.UnitPrice.ModelType.UNIT)
                                                    .name("string")
                                                    .planPhaseOrder(123L)
                                                    .priceType(
                                                        Price.UnitPrice.PriceType.USAGE_PRICE
                                                    )
                                                    .unitConfig(
                                                        Price.UnitPrice.UnitConfig.builder()
                                                            .unitAmount("string")
                                                            .build()
                                                    )
                                                    .build()
                                            )
                                        )
                                        .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                        .build()
                                )
                            )
                            .redeemedCoupon(
                                Subscription.RedeemedCoupon.builder()
                                    .couponId("string")
                                    .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                    .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                    .build()
                            )
                            .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .status(Subscription.Status.ACTIVE)
                            .trialInfo(
                                Subscription.TrialInfo.builder()
                                    .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                    .build()
                            )
                            .build()
                    )
                )
                .paginationMetadata(
                    PaginationMetadata.builder().hasMore(true).nextCursor("string").build()
                )
                .build()
        assertThat(subscriptions).isNotNull
        assertThat(subscriptions.data())
            .containsExactly(
                Subscription.builder()
                    .id("string")
                    .activePlanPhaseOrder(123L)
                    .adjustmentIntervals(
                        listOf(
                            Subscription.AdjustmentInterval.builder()
                                .id("string")
                                .adjustment(
                                    Subscription.AdjustmentInterval.Adjustment
                                        .ofAmountDiscountAdjustment(
                                            Subscription.AdjustmentInterval.Adjustment
                                                .AmountDiscountAdjustment
                                                .builder()
                                                .adjustmentType(
                                                    Subscription.AdjustmentInterval.Adjustment
                                                        .AmountDiscountAdjustment
                                                        .AdjustmentType
                                                        .AMOUNT_DISCOUNT
                                                )
                                                .amountDiscount("string")
                                                .appliesToPriceIds(listOf("string"))
                                                .reason("string")
                                                .build()
                                        )
                                )
                                .appliesToPriceIntervalIds(listOf("string"))
                                .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .build()
                        )
                    )
                    .autoCollection(true)
                    .billingCycleDay(31L)
                    .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .currentBillingPeriodEndDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .currentBillingPeriodStartDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .customer(
                        Customer.builder()
                            .id("string")
                            .additionalEmails(listOf("string"))
                            .autoCollection(true)
                            .balance("string")
                            .billingAddress(
                                Customer.BillingAddress.builder()
                                    .city("string")
                                    .country("string")
                                    .line1("string")
                                    .line2("string")
                                    .postalCode("string")
                                    .state("string")
                                    .build()
                            )
                            .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .currency("string")
                            .email("string")
                            .emailDelivery(true)
                            .externalCustomerId("string")
                            .metadata(Customer.Metadata.builder().build())
                            .name("string")
                            .paymentProvider(Customer.PaymentProvider.QUICKBOOKS)
                            .paymentProviderId("string")
                            .portalUrl("string")
                            .shippingAddress(
                                Customer.ShippingAddress.builder()
                                    .city("string")
                                    .country("string")
                                    .line1("string")
                                    .line2("string")
                                    .postalCode("string")
                                    .state("string")
                                    .build()
                            )
                            .taxId(
                                Customer.TaxId.builder()
                                    .country(Customer.TaxId.Country.AD)
                                    .type(Customer.TaxId.Type.AD_NRT)
                                    .value("string")
                                    .build()
                            )
                            .timezone("string")
                            .accountingSyncConfiguration(
                                Customer.AccountingSyncConfiguration.builder()
                                    .accountingProviders(
                                        listOf(
                                            Customer.AccountingSyncConfiguration.AccountingProvider
                                                .builder()
                                                .externalProviderId("string")
                                                .providerType(
                                                    Customer.AccountingSyncConfiguration
                                                        .AccountingProvider
                                                        .ProviderType
                                                        .QUICKBOOKS
                                                )
                                                .build()
                                        )
                                    )
                                    .excluded(true)
                                    .build()
                            )
                            .reportingConfiguration(
                                Customer.ReportingConfiguration.builder().exempt(true).build()
                            )
                            .build()
                    )
                    .defaultInvoiceMemo("string")
                    .discountIntervals(
                        listOf(
                            Subscription.DiscountInterval.ofAmountDiscountInterval(
                                Subscription.DiscountInterval.AmountDiscountInterval.builder()
                                    .amountDiscount("string")
                                    .appliesToPriceIds(listOf("string"))
                                    .appliesToPriceIntervalIds(listOf("string"))
                                    .discountType(
                                        Subscription.DiscountInterval.AmountDiscountInterval
                                            .DiscountType
                                            .AMOUNT
                                    )
                                    .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                    .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                    .build()
                            )
                        )
                    )
                    .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .fixedFeeQuantitySchedule(
                        listOf(
                            Subscription.FixedFeeQuantitySchedule.builder()
                                .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .priceId("string")
                                .quantity(42.23)
                                .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .build()
                        )
                    )
                    .invoicingThreshold("string")
                    .maximumIntervals(
                        listOf(
                            Subscription.MaximumInterval.builder()
                                .appliesToPriceIds(listOf("string"))
                                .appliesToPriceIntervalIds(listOf("string"))
                                .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .maximumAmount("string")
                                .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .build()
                        )
                    )
                    .metadata(Subscription.Metadata.builder().build())
                    .minimumIntervals(
                        listOf(
                            Subscription.MinimumInterval.builder()
                                .appliesToPriceIds(listOf("string"))
                                .appliesToPriceIntervalIds(listOf("string"))
                                .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .minimumAmount("string")
                                .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .build()
                        )
                    )
                    .netTerms(123L)
                    .plan(
                        Plan.builder()
                            .id("string")
                            .basePlan(
                                Plan.BasePlan.builder()
                                    .id("m2t5akQeh2obwxeU")
                                    .externalPlanId("m2t5akQeh2obwxeU")
                                    .name("Example plan")
                                    .build()
                            )
                            .basePlanId("string")
                            .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .currency("string")
                            .defaultInvoiceMemo("string")
                            .description("string")
                            .discount(
                                Discount.ofPercentageDiscount(
                                    Discount.PercentageDiscount.builder()
                                        .appliesToPriceIds(listOf("string"))
                                        .discountType(
                                            Discount.PercentageDiscount.DiscountType.PERCENTAGE
                                        )
                                        .percentageDiscount(1.0)
                                        .reason("string")
                                        .build()
                                )
                            )
                            .externalPlanId("string")
                            .invoicingCurrency("string")
                            .maximum(
                                Plan.Maximum.builder()
                                    .appliesToPriceIds(listOf("string"))
                                    .maximumAmount("string")
                                    .build()
                            )
                            .maximumAmount("string")
                            .metadata(Plan.Metadata.builder().build())
                            .minimum(
                                Plan.Minimum.builder()
                                    .appliesToPriceIds(listOf("string"))
                                    .minimumAmount("string")
                                    .build()
                            )
                            .minimumAmount("string")
                            .name("string")
                            .netTerms(123L)
                            .planPhases(
                                listOf(
                                    Plan.PlanPhase.builder()
                                        .id("string")
                                        .description("string")
                                        .discount(
                                            Discount.ofPercentageDiscount(
                                                Discount.PercentageDiscount.builder()
                                                    .appliesToPriceIds(listOf("string"))
                                                    .discountType(
                                                        Discount.PercentageDiscount.DiscountType
                                                            .PERCENTAGE
                                                    )
                                                    .percentageDiscount(1.0)
                                                    .reason("string")
                                                    .build()
                                            )
                                        )
                                        .duration(123L)
                                        .durationUnit(Plan.PlanPhase.DurationUnit.DAILY)
                                        .maximum(
                                            Plan.PlanPhase.Maximum.builder()
                                                .appliesToPriceIds(listOf("string"))
                                                .maximumAmount("string")
                                                .build()
                                        )
                                        .maximumAmount("string")
                                        .minimum(
                                            Plan.PlanPhase.Minimum.builder()
                                                .appliesToPriceIds(listOf("string"))
                                                .minimumAmount("string")
                                                .build()
                                        )
                                        .minimumAmount("string")
                                        .name("string")
                                        .order(123L)
                                        .build()
                                )
                            )
                            .prices(
                                listOf(
                                    Price.ofUnitPrice(
                                        Price.UnitPrice.builder()
                                            .id("string")
                                            .billableMetric(
                                                Price.UnitPrice.BillableMetric.builder()
                                                    .id("string")
                                                    .build()
                                            )
                                            .cadence(Price.UnitPrice.Cadence.ONE_TIME)
                                            .conversionRate(42.23)
                                            .createdAt(
                                                OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                            )
                                            .creditAllocation(
                                                Price.UnitPrice.CreditAllocation.builder()
                                                    .allowsRollover(true)
                                                    .currency("string")
                                                    .build()
                                            )
                                            .currency("string")
                                            .discount(
                                                Discount.ofPercentageDiscount(
                                                    Discount.PercentageDiscount.builder()
                                                        .appliesToPriceIds(listOf("string"))
                                                        .discountType(
                                                            Discount.PercentageDiscount.DiscountType
                                                                .PERCENTAGE
                                                        )
                                                        .percentageDiscount(1.0)
                                                        .reason("string")
                                                        .build()
                                                )
                                            )
                                            .externalPriceId("string")
                                            .fixedPriceQuantity(42.23)
                                            .item(
                                                Price.UnitPrice.Item.builder()
                                                    .id("string")
                                                    .name("string")
                                                    .build()
                                            )
                                            .maximum(
                                                Price.UnitPrice.Maximum.builder()
                                                    .appliesToPriceIds(listOf("string"))
                                                    .maximumAmount("string")
                                                    .build()
                                            )
                                            .maximumAmount("string")
                                            .minimum(
                                                Price.UnitPrice.Minimum.builder()
                                                    .appliesToPriceIds(listOf("string"))
                                                    .minimumAmount("string")
                                                    .build()
                                            )
                                            .minimumAmount("string")
                                            .modelType(Price.UnitPrice.ModelType.UNIT)
                                            .name("string")
                                            .planPhaseOrder(123L)
                                            .priceType(Price.UnitPrice.PriceType.USAGE_PRICE)
                                            .unitConfig(
                                                Price.UnitPrice.UnitConfig.builder()
                                                    .unitAmount("string")
                                                    .build()
                                            )
                                            .build()
                                    )
                                )
                            )
                            .product(
                                Plan.Product.builder()
                                    .id("string")
                                    .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                    .name("string")
                                    .build()
                            )
                            .status(Plan.Status.ACTIVE)
                            .trialConfig(
                                Plan.TrialConfig.builder()
                                    .trialPeriod(123L)
                                    .trialPeriodUnit(Plan.TrialConfig.TrialPeriodUnit.DAYS)
                                    .build()
                            )
                            .version(123L)
                            .build()
                    )
                    .priceIntervals(
                        listOf(
                            Subscription.PriceInterval.builder()
                                .id("string")
                                .billingCycleDay(123L)
                                .currentBillingPeriodEndDate(
                                    OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                )
                                .currentBillingPeriodStartDate(
                                    OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                )
                                .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .fixedFeeQuantityTransitions(
                                    listOf(
                                        Subscription.PriceInterval.FixedFeeQuantityTransition
                                            .builder()
                                            .effectiveDate(
                                                OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                            )
                                            .priceId("string")
                                            .quantity(123L)
                                            .build()
                                    )
                                )
                                .price(
                                    Price.ofUnitPrice(
                                        Price.UnitPrice.builder()
                                            .id("string")
                                            .billableMetric(
                                                Price.UnitPrice.BillableMetric.builder()
                                                    .id("string")
                                                    .build()
                                            )
                                            .cadence(Price.UnitPrice.Cadence.ONE_TIME)
                                            .conversionRate(42.23)
                                            .createdAt(
                                                OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                            )
                                            .creditAllocation(
                                                Price.UnitPrice.CreditAllocation.builder()
                                                    .allowsRollover(true)
                                                    .currency("string")
                                                    .build()
                                            )
                                            .currency("string")
                                            .discount(
                                                Discount.ofPercentageDiscount(
                                                    Discount.PercentageDiscount.builder()
                                                        .appliesToPriceIds(listOf("string"))
                                                        .discountType(
                                                            Discount.PercentageDiscount.DiscountType
                                                                .PERCENTAGE
                                                        )
                                                        .percentageDiscount(1.0)
                                                        .reason("string")
                                                        .build()
                                                )
                                            )
                                            .externalPriceId("string")
                                            .fixedPriceQuantity(42.23)
                                            .item(
                                                Price.UnitPrice.Item.builder()
                                                    .id("string")
                                                    .name("string")
                                                    .build()
                                            )
                                            .maximum(
                                                Price.UnitPrice.Maximum.builder()
                                                    .appliesToPriceIds(listOf("string"))
                                                    .maximumAmount("string")
                                                    .build()
                                            )
                                            .maximumAmount("string")
                                            .minimum(
                                                Price.UnitPrice.Minimum.builder()
                                                    .appliesToPriceIds(listOf("string"))
                                                    .minimumAmount("string")
                                                    .build()
                                            )
                                            .minimumAmount("string")
                                            .modelType(Price.UnitPrice.ModelType.UNIT)
                                            .name("string")
                                            .planPhaseOrder(123L)
                                            .priceType(Price.UnitPrice.PriceType.USAGE_PRICE)
                                            .unitConfig(
                                                Price.UnitPrice.UnitConfig.builder()
                                                    .unitAmount("string")
                                                    .build()
                                            )
                                            .build()
                                    )
                                )
                                .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .build()
                        )
                    )
                    .redeemedCoupon(
                        Subscription.RedeemedCoupon.builder()
                            .couponId("string")
                            .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .build()
                    )
                    .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .status(Subscription.Status.ACTIVE)
                    .trialInfo(
                        Subscription.TrialInfo.builder()
                            .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .build()
                    )
                    .build()
            )
        assertThat(subscriptions.paginationMetadata())
            .isEqualTo(PaginationMetadata.builder().hasMore(true).nextCursor("string").build())
    }
}
