// File generated from our OpenAPI spec by Stainless.

package com.withorb.api.models

import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

class CustomerTest {

    @Test
    fun createCustomer() {
        val customer =
            Customer.builder()
                .id("string")
                .additionalEmails(listOf("string"))
                .autoCollection(true)
                .balance("string")
                .billingAddress(
                    Customer.BillingAddress.builder()
                        .city("string")
                        .country("string")
                        .line1("string")
                        .line2("string")
                        .postalCode("string")
                        .state("string")
                        .build()
                )
                .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .currency("string")
                .email("string")
                .emailDelivery(true)
                .externalCustomerId("string")
                .metadata(Customer.Metadata.builder().build())
                .name("string")
                .paymentProvider(Customer.PaymentProvider.QUICKBOOKS)
                .paymentProviderId("string")
                .portalUrl("string")
                .shippingAddress(
                    Customer.ShippingAddress.builder()
                        .city("string")
                        .country("string")
                        .line1("string")
                        .line2("string")
                        .postalCode("string")
                        .state("string")
                        .build()
                )
                .taxId(
                    Customer.TaxId.builder()
                        .country(Customer.TaxId.Country.AD)
                        .type(Customer.TaxId.Type.AD_NRT)
                        .value("string")
                        .build()
                )
                .timezone("string")
                .accountingSyncConfiguration(
                    Customer.AccountingSyncConfiguration.builder()
                        .accountingProviders(
                            listOf(
                                Customer.AccountingSyncConfiguration.AccountingProvider.builder()
                                    .externalProviderId("string")
                                    .providerType(
                                        Customer.AccountingSyncConfiguration.AccountingProvider
                                            .ProviderType
                                            .QUICKBOOKS
                                    )
                                    .build()
                            )
                        )
                        .excluded(true)
                        .build()
                )
                .reportingConfiguration(
                    Customer.ReportingConfiguration.builder().exempt(true).build()
                )
                .build()
        assertThat(customer).isNotNull
        assertThat(customer.id()).isEqualTo("string")
        assertThat(customer.additionalEmails()).containsExactly("string")
        assertThat(customer.autoCollection()).isEqualTo(true)
        assertThat(customer.balance()).isEqualTo("string")
        assertThat(customer.billingAddress())
            .isEqualTo(
                Customer.BillingAddress.builder()
                    .city("string")
                    .country("string")
                    .line1("string")
                    .line2("string")
                    .postalCode("string")
                    .state("string")
                    .build()
            )
        assertThat(customer.createdAt()).isEqualTo(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(customer.currency()).isEqualTo("string")
        assertThat(customer.email()).isEqualTo("string")
        assertThat(customer.emailDelivery()).isEqualTo(true)
        assertThat(customer.externalCustomerId()).isEqualTo("string")
        assertThat(customer.metadata()).isEqualTo(Customer.Metadata.builder().build())
        assertThat(customer.name()).isEqualTo("string")
        assertThat(customer.paymentProvider()).isEqualTo(Customer.PaymentProvider.QUICKBOOKS)
        assertThat(customer.paymentProviderId()).isEqualTo("string")
        assertThat(customer.portalUrl()).isEqualTo("string")
        assertThat(customer.shippingAddress())
            .isEqualTo(
                Customer.ShippingAddress.builder()
                    .city("string")
                    .country("string")
                    .line1("string")
                    .line2("string")
                    .postalCode("string")
                    .state("string")
                    .build()
            )
        assertThat(customer.taxId())
            .isEqualTo(
                Customer.TaxId.builder()
                    .country(Customer.TaxId.Country.AD)
                    .type(Customer.TaxId.Type.AD_NRT)
                    .value("string")
                    .build()
            )
        assertThat(customer.timezone()).isEqualTo("string")
        assertThat(customer.accountingSyncConfiguration())
            .isEqualTo(
                Customer.AccountingSyncConfiguration.builder()
                    .accountingProviders(
                        listOf(
                            Customer.AccountingSyncConfiguration.AccountingProvider.builder()
                                .externalProviderId("string")
                                .providerType(
                                    Customer.AccountingSyncConfiguration.AccountingProvider
                                        .ProviderType
                                        .QUICKBOOKS
                                )
                                .build()
                        )
                    )
                    .excluded(true)
                    .build()
            )
        assertThat(customer.reportingConfiguration())
            .isEqualTo(Customer.ReportingConfiguration.builder().exempt(true).build())
    }
}
